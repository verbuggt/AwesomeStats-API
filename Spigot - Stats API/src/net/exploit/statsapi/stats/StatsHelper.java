package net.exploit.statsapi.stats;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.UUID;

import org.bukkit.Bukkit;

import net.exploit.statsapi.main.StatsAPI;
import net.exploit.statsapi.mysql.MySQL;

public class StatsHelper {

	private String worktable;
	private HashMap<String, Value> values = new HashMap<>();

	public StatsHelper(String table, Value[] values, boolean autoPoints) {
		MySQL mysql = StatsAPI.getApi().getMySQL();

		this.worktable = table.toLowerCase();

		if (autoPoints) {
			Value[] tempValues = new Value[values.length + 1];
			System.arraycopy(values, 0, tempValues, 0, values.length);
			tempValues[values.length] = new Value("points", VT.INT);
			values = tempValues;
		}

		int l = values.length;
		boolean alter = mysql.tableExist(worktable);
		boolean execute = alter ? false : true;
		HashMap<String, String> columns_delete = alter ? mysql.getTableColumns(worktable) : null;
		String query = alter ? "ALTER TABLE " + worktable + " " : "CREATE TABLE IF NOT EXISTS " + worktable + "(uuid VARCHAR(36), ";

		for (int i = 0; i < l; i++) {
			Value v = values[i];
			String valueName = v.getName();
			try {
				validateValue(v);
			} catch (Exception e) {
				e.printStackTrace();
				break;
			}
			this.values.put(valueName, v);
			if (alter)
				if (!columns_delete.keySet().contains(valueName)) {
					if (execute)
						query += ", ";
					query += "ADD " + valueName + " " + v.getSQLString();
					execute = true;
				} else {
					if (!v.getDataTypeName().equals(columns_delete.get(v.getName()))) {
						System.out.println(columns_delete.get(v.getName()));
						System.out.println(v.getDataTypeName());
						if (execute)
							query += ", ";
						query += "MODIFY " + v.getName() + " " + v.getSQLString();
						execute = true;
					}
					columns_delete.remove(v.getName());
				}
			else {
				query += valueName + " " + v.getSQLString();
				if (i < l - 1)
					query += ", ";
				else if (i == l - 1)
					query += ");";
			}
		}
		if (alter)
			if (columns_delete.size() != 0) {
				for (String s : columns_delete.keySet()) {
					if (!s.equals("uuid")) {
						query += execute ? ", DROP " + s : "DROP " + s;
						execute = true;
					}
				}
				query += ";";
			}

		// Hello. Im a debug print
		// System.out.println("\nEXECUTE QUEREY: " + execute + "\nQUERY: \n" + query);
		if (execute)
			StatsAPI.getApi().getMySQL().update(query);
	}

	public StatsHelper(String table, Value[] values) {
		this(table, values, false);
	}

	private void validateValue(Value v) throws Exception {
		if (this.values.keySet().contains(v.getName()))
			throw new Exception("Illegal Value Parameters: Duplicate Entry");
		else if (v.getName() == "uuid")
			throw new Exception("Illegal Value Parameters: Forbidden Valuename");
		else if (v.getName() == "name" || v.getName() == "playername" || v.getName() == "pname")
			Bukkit.getLogger().warning("Redundancy suspected. No need to store playernames - use UserUtil instead (<StatsHelper>.getUserUtil()) or ask verbuqqt c:");
	}

	// TODO (maybe): Add Type-specific methods (getInt, getString etc.)
	public Object getValueByUUID(String valuename, UUID playerUUID) {
		String vntlc = valuename.toLowerCase();
		if (this.values.keySet().contains(vntlc)) {
			Object o = null;
			try {
				ResultSet rs = StatsAPI.getApi().getMySQL().query("SELECT " + vntlc + " FROM " + this.worktable + " WHERE uuid='" + playerUUID.toString() + "';");
				if (rs.next())
					o = rs.getObject(vntlc);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return o;
		}
		return null;
	}

	public void setValue(String valueName, UUID playerUUID, Object value) {
		if(existsValue(valueName))
			this.values.get(valueName).set(value);
	}

	public boolean existsValue(String valueName) {
		if (this.values.containsKey(valueName.toLowerCase()))
			return true;
		return false;
	}

	/**
	 * @return hashmap of values
	 */
	@Deprecated
	public HashMap<String, Value> getValues() {
		return this.values;
	}
}

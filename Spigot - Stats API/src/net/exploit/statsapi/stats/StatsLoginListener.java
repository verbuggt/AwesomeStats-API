package net.exploit.statsapi.stats;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.UUID;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerLoginEvent;

import net.exploit.statsapi.main.StatsAPI;
import net.exploit.statsapi.mysql.MySQL;

public class StatsLoginListener implements Listener {

    private MySQL mysql;
    private StatsHelper statsHelper;

    public StatsLoginListener(StatsHelper statsHelper) {
        this.mysql = StatsAPI.getApi().getMySQL();
        this.statsHelper = statsHelper;
    }

    @EventHandler
    private void onLogin(PlayerLoginEvent e) {
        Player p = e.getPlayer();
        if (!exists(p.getUniqueId()))
            createPlayer(p.getUniqueId(), p.getName());
    }

    private void createPlayer(UUID uuid, String name) {
        mysql.updateSynchronously("INSERT INTO " + statsHelper.getWorktable() + "(uuid, " + getValueNames() + ") VALUES('" + uuid.toString() + "'" + getDefaultValues() + ");");
    }

    private String getDefaultValues() {
        StringBuilder result = new StringBuilder();
        for (Value v : statsHelper.getValues().values()) {
            result.append(", ").append(v.getValueType().getDefaultValue());
        }
        return result.toString();
    }

    private String getValueNames() {
        StringBuilder result = new StringBuilder();
        Iterator<String> iterator = statsHelper.getValues().keySet().iterator();
        while (iterator.hasNext()) {
            result.append(iterator.next());
            if (iterator.hasNext())
                result.append(", ");
        }
        return result.toString();
    }

    private boolean exists(UUID uuid) {
        try {
            ResultSet rs = mysql.query("SELECT uuid FROM " + statsHelper.getWorktable() + " WHERE uuid='" + uuid + "';");
            if (rs.next())
                return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

}
